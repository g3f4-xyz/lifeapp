# Application entry point
type App {
  home: Home
  taskDetails(id: String): Task
}

# Home module
type Home implements Node {
  # The ID of an object
  id: ID!

  # User's tasks
  tasks(after: String, first: Int, before: String, last: Int): TaskConnection
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  app: App

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# A task
type Task implements Node {
  # The ID of an object
  id: ID!

  # Task title
  title: String

  # Task priority
  priority: String

  # Task creationDate
  creationDate: String

  # Task finishDate
  finishDate: String

  # Task progress
  progress: String

  # Task status
  status: String

  # Task note
  note: String
}

# A connection to a list of items.
type TaskConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskEdge]
}

# An edge in a connection.
type TaskEdge {
  # The item at the end of the edge
  node: Task

  # A cursor for use in pagination
  cursor: String!
}
