# add task input type
input addTaskFieldType {
  fieldId: String
  number: Float
  text: String
}

input addTaskInput {
  id: ID
  priority: Int
  status: String
  title: String
  additionalFields: [addTaskFieldType]
  clientMutationId: String
}

type addTaskPayload {
  newTaskEdge: TaskTypeEdge
  taskList: TaskListType
  clientMutationId: String
}

# Application entry point
type AppType {
  # The ID of an object
  id: ID!
  taskList: TaskListType
  detailsList(ids: [ID]): [TaskType]
  taskCreate(type: String): TaskType
}

# Field Type
type FieldType {
  # fieldId field description
  fieldId: String

  # format field description
  format: String

  # type field description
  type: String

  # label field description
  label: String

  # value field description
  value: ValuesUnion

  # info field description
  info: String

  # meta field description
  meta: MetasUnion
}

# Metas Union
union MetasUnion = NumberMetaType | TextMetaType

type Mutation {
  addTask(input: addTaskInput!): addTaskPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# NumberMetaType
type NumberMetaType {
  # required
  required: Boolean

  # min
  min: Float

  # max
  max: Float
}

type NumberValueType {
  number: Float
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Application entry point
  app: AppType

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

# TaskListType module description
type TaskListType implements Node {
  # The ID of an object
  id: ID!

  # Task list
  list(after: String, first: Int, before: String, last: Int): TaskTypeConnection
}

# Task type decription
type TaskType implements Node {
  # The ID of an object
  id: ID!
  title: String
  status: String
  priority: Int
  additionalFields: [FieldType]
}

# A connection to a list of items.
type TaskTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TaskTypeEdge]
}

# An edge in a connection.
type TaskTypeEdge {
  # The item at the end of the edge
  node: TaskType

  # A cursor for use in pagination
  cursor: String!
}

# TextMetaType
type TextMetaType {
  # required
  required: Boolean

  # minLen
  minLen: Int

  # maxLen
  maxLen: Int
}

type TextNumberType {
  text: String
}

# Values Union
union ValuesUnion = NumberValueType | TextNumberType
