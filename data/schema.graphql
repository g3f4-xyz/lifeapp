"""Application entry point"""
type AppType {
  """The ID of an object"""
  id: ID!
  taskList: TaskListType
  taskTypeList: TaskTypeListType
}

"""choice meta type"""
type ChoiceMetaType {
  """required"""
  required: Boolean

  """defaultValue"""
  defaultValue: Int

  """options"""
  options: [ChoiceOptionsMetaType]
}

"""choice options meta type"""
type ChoiceOptionsMetaType {
  """text"""
  text: String

  """value"""
  value: String
}

type ChoiceValueType {
  id: String
}

input deleteTaskMutationInput {
  id: ID
  clientMutationId: String
}

type deleteTaskMutationPayload {
  deletedTaskId: String
  clientMutationId: String
}

"""fields input type"""
input fieldsInputType {
  fieldId: String
  format: String
  order: Int
  type: String
  label: String
  value: valueInputType
  info: String
  meta: metaInputType
}

"""field type"""
type FieldType {
  """fieldId field description"""
  fieldId: String

  """format field description"""
  format: String

  """order field description"""
  order: Int

  """type field description"""
  type: String

  """label field description"""
  label: String

  """value field description"""
  value: ValuesUnion

  """info field description"""
  info: String

  """meta field description"""
  meta: MetasUnion
}

"""meta input type"""
input metaInputType {
  required: Boolean
  min: Float
  max: Float
  minLen: Int
  maxLen: Int
  defaultValue: String
  options: [optionsInputType]
}

"""metas union"""
union MetasUnion = ChoiceMetaType | NumberMetaType | TextMetaType

type Mutation {
  deleteTask(input: deleteTaskMutationInput!): deleteTaskMutationPayload
  saveTask(input: saveTaskMutationInput!): saveTaskMutationPayload
  saveTaskType(input: saveTaskTypeMutationInput!): saveTaskTypeMutationPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""number meta type"""
type NumberMetaType {
  """required"""
  required: Boolean

  """min"""
  min: Float

  """max"""
  max: Float
}

"""number value type"""
type NumberValueType {
  number: Float
}

"""options input type"""
input optionsInputType {
  text: String
  value: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Application entry point"""
  app: AppType
}

input saveTaskMutationInput {
  isNew: Boolean
  task: taskInputType
  clientMutationId: String
}

type saveTaskMutationPayload {
  newTaskEdge: TaskTypeEdge
  clientMutationId: String
}

input saveTaskTypeMutationInput {
  typeId: ID
  name: String
  description: String
  order: Int
  isNew: Boolean
  isCustom: Boolean
  parentId: String
  fields: [fieldsInputType]
  clientMutationId: String
}

type saveTaskTypeMutationPayload {
  newTaskTypeEdge: TaskTypeTypeEdge
  taskTypeList: TaskTypeListType
  clientMutationId: String
}

"""task input type"""
input taskInputType {
  id: ID
  taskType: String
  fields: [fieldsInputType]
}

"""task list type"""
type TaskListType implements Node {
  """The ID of an object"""
  id: ID!

  """Task list"""
  list(after: String, first: Int, before: String, last: Int): Task
}

"""task type"""
type TaskType implements Node {
  """The ID of an object"""
  id: ID!
  taskType: String
  fields(filterByIds: [String]): [FieldType]
}

"""A connection to a list of items."""
type Task {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskTypeEdge]
}

"""An edge in a connection."""
type TaskTypeEdge {
  """The item at the end of the edge"""
  node: TaskType

  """A cursor for use in pagination"""
  cursor: String!
}

"""task type list type"""
type TaskTypeListType implements Node {
  """The ID of an object"""
  id: ID!

  """Task`s type list description"""
  list(after: String, first: Int, before: String, last: Int): TaskTypeTypeConnection
}

"""task type type"""
type TaskTypeType implements Node {
  """The ID of an object"""
  id: ID!
  typeId: String
  name: String
  description: String
  order: Int
  isCustom: Boolean
  parentId: String
  fields: [FieldType]
}

"""A connection to a list of items."""
type TaskTypeTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskTypeTypeEdge]
}

"""An edge in a connection."""
type TaskTypeTypeEdge {
  """The item at the end of the edge"""
  node: TaskTypeType

  """A cursor for use in pagination"""
  cursor: String!
}

"""text meta type"""
type TextMetaType {
  """required"""
  required: Boolean

  """minLen"""
  minLen: Int

  """maxLen"""
  maxLen: Int
}

type TextValueType {
  text: String
}

"""value input type"""
input valueInputType {
  text: String
  number: Int
  id: String
}

"""Values Union"""
union ValuesUnion = ChoiceValueType | NumberValueType | TextValueType
